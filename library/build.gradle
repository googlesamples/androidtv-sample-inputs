apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    namespace "com.google.android.media.tv.companionlibrary"
    compileSdkVersion 34
    buildToolsVersion "34.0.0"

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 34
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        resources {
            excludes += [
                    'error_prone/Annotations.gwt.xml',
                    'third_party/java_src/error_prone/project/annotations/Annotations.gwt.xml',
                    'third_party/java_src/error_prone/project/annotations/Google_internal.gwt.xml',
                    'jsr305_annotations/Jsr305_annotations.gwt.xml'
            ]
        }
    }

    testNamespace 'com.google.android.media.tv.companionlibrary.test'
}

configurations {
    doclava
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.leanback:leanback:1.0.0"
    implementation "com.google.ads.interactivemedia.v3:interactivemedia:3.29.0"
    implementation "com.google.android.gms:play-services-ads:22.6.0"
    implementation "junit:junit:4.13.2"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation "org.robolectric:robolectric:4.10.3"

    implementation "androidx.annotation:annotation:1.7.0"

    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.ext:truth:1.5.0'
    androidTestImplementation 'com.google.truth:truth:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.5.1'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.5.1'

    doclava 'com.google.doclava:doclava:1.0.6'
}

/* Library release process:
 *
 * 1. Change package version
 * 2. Run the following gradle commands in this order:
 *   generatePomFileForLibraryPublishPublication
 *   publishLibraryPublishPublicationToMavenLocal
 *   bintrayUpload
 */
def packageVersion = '0.4.1'

tasks.register('sourceJar', Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

tasks.register('javadoc', Javadoc) {
    dependsOn project.configurations.doclava
    failOnError = false
    title = null
    source = android.sourceSets.main.java.srcDirs
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

publishing {
    publications {
        libraryPublish(MavenPublication) {
            groupId 'com.google.android.libraries.tv'
            artifactId 'companionlibrary'
            version packageVersion
            artifacts = configurations.archives.artifacts
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

// Optionally load keystore
if (file("$rootProject/keystore.properties").exists()) {
    def keystorePropertiesFile = rootProject.file("keystore.properties");
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    bintray {
        user = keystoreProperties['BINTRAY_USER']
        key = keystoreProperties['BINTRAY_API_KEY']
        publications = ['libraryPublish']
        publish = true
        pkg {
            repo = 'tif-companion'
            name = 'tif-companion'
            userOrg = 'google'
            version {
                name = packageVersion
                gpg {
                    sign = true
                }
            }
        }
    }
} else {
    println "Warning: keystore file does not exist. Library revision cannot be published."
}